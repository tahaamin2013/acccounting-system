// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  createdCompanies Company[]      @relation("CompanyCreator")
  userCompanies    UserCompany[]
  journalEntries   JournalEntry[]

  @@map("users")
}

model Company {
  id          String   @id @default(cuid())
  name        String
  description String?
  industry    String?
  address     String?
  phone       String?
  email       String?
  taxId       String?  @map("tax_id")
  createdById String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  createdBy      User            @relation("CompanyCreator", fields: [createdById], references: [id], onDelete: Cascade)
  userCompanies  UserCompany[]
  journalEntries JournalEntry[]
  accounts       Account[]

  @@map("companies")
}

model UserCompany {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  companyId String   @map("company_id")
  role      Role     @default(VIEWER)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
  @@map("user_companies")
}

model Account {
  id          String      @id @default(cuid())
  companyId   String      @map("company_id")
  code        String
  name        String
  type        AccountType
  subcategory String?     // New field for subcategory
  parentId    String?     @map("parent_id")
  isActive    Boolean     @default(true) @map("is_active")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  // Relations
  company      Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  parent       Account?      @relation("AccountHierarchy", fields: [parentId], references: [id])
  children     Account[]     @relation("AccountHierarchy")
  journalLines JournalLine[]

  @@unique([companyId, code])
  @@map("accounts")
}

model JournalEntry {
  id          String   @id @default(cuid())
  companyId   String   @map("company_id")
  userId      String   @map("user_id")
  date        DateTime
  description String
  reference   String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  company Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  lines   JournalLine[]

  @@map("journal_entries")
}

model JournalLine {
  id             String  @id @default(cuid())
  journalEntryId String  @map("journal_entry_id")
  accountId      String? @map("account_id")
  accountName    String  @map("account_name") // For backward compatibility
  description    String?
  debit          Decimal @default(0) @db.Decimal(15, 2)
  credit         Decimal @default(0) @db.Decimal(15, 2)
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  journalEntry JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  account      Account?     @relation(fields: [accountId], references: [id])

  @@map("journal_lines")
}

enum Role {
  OWNER
  ADMIN
  ACCOUNTANT
  VIEWER
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}
